import { ImageMetaData } from 'main/exif';
import { useCallback, useEffect, useState } from 'react';
import { useSelector } from 'react-redux';
import { useNavigate, useParams } from 'react-router-dom';
import { RootState } from 'renderer/redux';

export default function ImageDetail() {
  const navigate = useNavigate();
  const navigatorParams = useParams();
  const selectedModel = navigatorParams.model;
  const fileBaseName = navigatorParams.baseName;
  const settings = useSelector((state: RootState) => state.global.settings);

  const [imageData, setImageData] = useState<string>('');
  const [exifParams, setExifParams] = useState<Record<string, any> | null>(
    null
  );
  const [imageMetadata, setImageMetadata] = useState<ImageMetaData | null>(
    null
  );

  useEffect(() => {
    if (!fileBaseName || !selectedModel) return;

    const load = async () => {
      const { documentsPath } = await window.ipcHandler.getPaths();
      const filePath = `${documentsPath}\\sd-manager\\images\\${selectedModel}\\${fileBaseName}`;
      const {
        base64,
        exif,
        metadata,
      }: {
        base64: string;
        exif: Record<string, any>;
        metadata: ImageMetaData | null;
      } = await window.ipcHandler.readImage(filePath);
      setImageData(base64);
      setExifParams(exif);
      setImageMetadata(metadata);
    };
    load();
  }, [fileBaseName, selectedModel, settings.imagesPath]);

  const goBack = useCallback(() => {
    navigate(-1);
  }, [navigate]);

  useEffect(() => {
    const onKeyDown = (event: KeyboardEvent) => {
      if (event.key === 'Backspace') {
        goBack();
      }
    };

    window.addEventListener('keydown', onKeyDown);

    return () => window.removeEventListener('keydown', onKeyDown);
  }, [goBack]);

  if (!fileBaseName || !selectedModel) return null;

  const imageDetailTable = () => {
    if (!imageMetadata) return null;

    return (
      <tbody>
        <tr>
          <td>Prompt</td>
          <td>
            <p className="prose max-w-none">
              {imageMetadata.positivePrompt || ''}
            </p>
          </td>
        </tr>
        <tr>
          <td>Negative Prompt</td>
          <td>
            <p className="prose max-w-none">
              {imageMetadata.negativePrompt || ''}
            </p>
          </td>
        </tr>
        <tr>
          <td>Sampler</td>
          <td>
            <p className="prose max-w-none">{imageMetadata.sampler}</p>
          </td>
        </tr>
        <tr>
          <td>Scheduler</td>
          <td>
            <p className="prose max-w-none">{imageMetadata.scheduler}</p>
          </td>
        </tr>
        <tr>
          <td>Steps</td>
          <td>
            <p className="prose max-w-none">{imageMetadata.steps}</p>
          </td>
        </tr>
        <tr>
          <td>Seed</td>
          <td>
            <p className="prose max-w-none">{imageMetadata.seed}</p>
          </td>
        </tr>
        <tr>
          <td>CFG</td>
          <td>
            <p className="prose max-w-none">{imageMetadata.cfg}</p>
          </td>
        </tr>
        <tr>
          <td>Generated by</td>
          <td>
            <p className="prose max-w-none">{imageMetadata.generatedBy}</p>
          </td>
        </tr>
      </tbody>
    );
  };

  return (
    <div className="p-4 flex justify-center relative h-full">
      <section className="w-5/6">
        <div>
          <p className="text-2xl font-bold text-gray-300">{selectedModel}</p>
        </div>
        <div className="flex w-full my-4">
          <img src={`data:image/png;base64,${imageData}`} alt={fileBaseName} />
        </div>
        <div className="w-full mt-4 pb-20">
          <table className="table">
            <thead>
              <tr>
                <th>Details:</th>
                <th> </th>
              </tr>
            </thead>
            {imageDetailTable()}
          </table>
        </div>
      </section>
      <div className="absolute top-10 right-10">
        <button
          className="btn btn-circle"
          type="button"
          onClick={() => goBack()}
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            strokeWidth={1.5}
            stroke="currentColor"
            className="w-6 h-6"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              d="M6.75 15.75L3 12m0 0l3.75-3.75M3 12h18"
            />
          </svg>
        </button>
      </div>
    </div>
  );
}
